import { factories } from '@strapi/strapi';

interface FormData {
    name: string;
    phone: string;
    accept_terms: boolean | string;
}

export default factories.createCoreController(
    'api::form-submission.form-submission',
    ({ strapi }) => ({
        async create(ctx) {
            try {
                // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                const sanitizedInput = await this.sanitizeInput(ctx.request.body, ctx);
                const { data } = sanitizedInput as { data: FormData };
                const { name, phone, accept_terms } = data;

                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                const entry = await strapi.service('api::form-submission.form-submission').create({
                    data: {
                        name,
                        phone,
                        accept_terms: accept_terms === "true" || accept_terms === true
                    },
                });

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å noreply —è—â–∏–∫–∞
                if (process.env.SEND_EMAILS !== 'false') {
                    try {
                        await strapi.plugins['email'].services.email.send({
                            to: process.env.SMTP_TO_ADMIN || 'slastenindev@gmail.com',
                            from: process.env.SMTP_DEFAULT_FROM,
                            replyTo: process.env.SMTP_DEFAULT_REPLY_TO,
                            subject: 'üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞',
                            html: `
                                <div style="font-family: Arial, sans-serif; max-width: 600px;">
                                  <h2 style="color: #2563eb;">üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</h2>
                                  
                                  <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #2563eb;">
                                    <p><strong>üë§ –ò–º—è:</strong> ${name}</p>
                                    <p><strong>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</strong> <a href="tel:${phone}">${phone}</a></p>
                                    <p><strong>‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π:</strong> ${accept_terms ? '–î–∞' : '–ù–µ—Ç'}</p>
                                    <p><strong>üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:</strong> ${new Date().toLocaleString('ru-RU')}</p>
                                  </div>
                                  
                                  <div style="margin-top: 20px; padding: 15px; background: #fff3cd; border-radius: 6px;">
                                    <p style="margin: 0; color: #856404;">
                                      <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. 
                                      –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ. 
                                      –î–ª—è —Å–≤—è–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—á—Ç—É: ${process.env.SMTP_DEFAULT_REPLY_TO}
                                    </p>
                                  </div>
                                  
                                  <p style="color: #6c757d; font-size: 12px; margin-top: 20px;">
                                    ¬© ${new Date().getFullYear()} LEGENDA Hotels. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.
                                  </p>
                                </div>
                              `,
                        });

                        console.log('‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å noreply —è—â–∏–∫–∞');

                    } catch (emailError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError);
                    }
                } else {
                    strapi.log.info('Email sending is disabled by SEND_EMAILS=false');
                }

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
                const sanitizedEntry = await this.sanitizeOutput(entry, ctx);
                return this.transformResponse(sanitizedEntry);

            } catch (error) {
                strapi.log.error('Error:', error);
            }
        }
    })
);